-- Bảng lưu thông tin trường học
CREATE TABLE schools (
  id INT AUTO_INCREMENT PRIMARY KEY, -- id: Khóa chính, tự tăng, định danh duy nhất cho mỗi trường.
  name VARCHAR(255) NOT NULL         -- name: Tên trường học (ví dụ: "Trường A", "Trường B").
);



-- Bảng lưu thông tin khoa của từng trường
CREATE TABLE faculties (
  id INT AUTO_INCREMENT PRIMARY KEY, -- id: Khóa chính, tự tăng, định danh duy nhất cho mỗi khoa.
  school_id INT NOT NULL,            -- school_id: Khóa ngoại liên kết đến bảng schools (xác định trường mà khoa thuộc về).
  name VARCHAR(255) NOT NULL,        -- name: Tên khoa (ví dụ: "Khoa X", "Khoa Z").
  FOREIGN KEY (school_id) REFERENCES schools(id) -- Ràng buộc khóa ngoại đảm bảo school_id tồn tại trong bảng schools.
);





-- Bảng lưu thông tin các môn học thuộc từng khoa
CREATE TABLE subjects (
  id INT AUTO_INCREMENT PRIMARY KEY, -- id: Khóa chính, tự tăng, định danh duy nhất cho mỗi môn học.
  faculty_id INT NOT NULL,           -- faculty_id: Khóa ngoại liên kết đến bảng faculties (xác định khoa mà môn học thuộc về).
  name VARCHAR(255) NOT NULL,        -- name: Tên môn học (ví dụ: "Môn Toán", "Môn Anh").
  FOREIGN KEY (faculty_id) REFERENCES faculties(id) -- Ràng buộc khóa ngoại đảm bảo faculty_id tồn tại trong bảng faculties.
);

-- Bảng lưu thông tin tài liệu (đề thi, đề cương)
CREATE TABLE documents (
  id INT AUTO_INCREMENT PRIMARY KEY, -- id: Khóa chính, tự tăng, định danh duy nhất cho mỗi tài liệu.
  subject_id INT NOT NULL,            -- subject_id: Khóa ngoại liên kết đến bảng subjects (xác định môn học của tài liệu).
  year INT NOT NULL,                  -- year: Năm của tài liệu (ví dụ: 2022).
  file_name VARCHAR(255) NOT NULL,    -- file_name: Tên file tài liệu (ví dụ: "Đề Thi Toán 2022.pdf").
  file_info VARCHAR(255) NOT NULL,    -- file_info: Thông tin mô tả thêm về tài liệu (ví dụ: "Trường A - Khoa X - Môn Toán - 2022").
  document_type ENUM('exam', 'syllabus') NOT NULL, -- document_type: Loại tài liệu, 'exam' cho đề thi, 'syllabus' cho đề cương.
  file_path VARCHAR(255) NOT NULL,    -- file_path: Đường dẫn lưu trữ file trên hệ thống hoặc URL.
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- created_at: Thời gian tạo bản ghi.
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- updated_at: Thời gian cập nhật bản ghi (tự động cập nhật mỗi khi có thay đổi).
  FOREIGN KEY (subject_id) REFERENCES subjects(id) -- Ràng buộc khóa ngoại đảm bảo subject_id tồn tại trong bảng subjects.
);

-- Bảng lưu thông tin lượt mở file (log mở file)
CREATE TABLE file_open_logs (
  id INT AUTO_INCREMENT PRIMARY KEY,                 -- id: Khóa chính, tự tăng, định danh duy nhất cho mỗi lượt mở file.
  document_id INT NOT NULL,                           -- document_id: Khóa ngoại liên kết đến bảng documents (xác định tài liệu được mở).
  opened_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,      -- opened_at: Thời gian file được mở.
  FOREIGN KEY (document_id) REFERENCES documents(id)  -- Ràng buộc khóa ngoại đảm bảo document_id tồn tại trong bảng documents.
);
CREATE TABLE subscriptions (
  id INT AUTO_INCREMENT PRIMARY KEY,
  school_id INT NOT NULL,
  faculty_id INT NOT NULL,
  email VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (school_id) REFERENCES schools(id),
  FOREIGN KEY (faculty_id) REFERENCES faculties(id)
);

CREATE TABLE exam_donggop (
    id INT AUTO_INCREMENT PRIMARY KEY,
    school_id INT NOT NULL,
    filename VARCHAR(255) NOT NULL,
    filepath VARCHAR(255) NOT NULL,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fullname VARCHAR(255) NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(64) NOT NULL,
    university VARCHAR(100) NOT NULL,
    account_status ENUM('bình thường', 'đang duyệt', 'đã duyệt') NOT NULL DEFAULT 'đã duyệt',
    has_viewed TINYINT(1) DEFAULT 0 -- 0: chưa xem lần đầu, 1: đã xem lần đầu
);
CREATE TABLE user_images (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    image_path VARCHAR(255) NOT NULL,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
-- bảng lưu log user 
CREATE TABLE user_activity_logs (
  id INT AUTO_INCREMENT PRIMARY KEY,               -- Khóa chính, tự tăng
  user_id INT NOT NULL,                             -- ID người dùng thực hiện hoạt động
  activity_type ENUM('login', 'view_exam') NOT NULL,  -- Loại hoạt động: 'login' hoặc 'view_exam'
  document_id INT,                                  -- ID đề thi (tham chiếu bảng documents), có thể NULL nếu hoạt động không liên quan đến tài liệu
  activity_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,-- Thời gian thực hiện hoạt động
  ip_address VARCHAR(45),                           -- (Tùy chọn) Lưu địa chỉ IP của người dùng
  FOREIGN KEY (user_id) REFERENCES users(id),       -- Ràng buộc khóa ngoại đến bảng users
  FOREIGN KEY (document_id) REFERENCES documents(id)  -- Ràng buộc khóa ngoại đến bảng documents
);
DELIMITER //

CREATE TRIGGER update_user_status_once
AFTER INSERT ON user_activity_logs
FOR EACH ROW
BEGIN
    -- Định nghĩa mốc thời gian cài đặt (ví dụ: từ 14/03/2025 00:00:00)
    DECLARE install_time TIMESTAMP;
    SET install_time = '2025-03-14 00:00:00'; -- Thay đổi thành thời gian mày muốn

    -- Kiểm tra nếu hành động là 'view_exam', chưa xem lần đầu, và từ mốc thời gian trở đi
    IF NEW.activity_type = 'view_exam' 
       AND NEW.activity_time >= install_time 
       AND EXISTS (
           SELECT 1 FROM users 
           WHERE id = NEW.user_id 
           AND has_viewed = 0 
           AND account_status = 'đã duyệt'
       ) THEN
        -- Cập nhật trạng thái thành 'bình thường' và đánh dấu đã xem
        UPDATE users
        SET account_status = 'bình thường',
            has_viewed = 1
        WHERE id = NEW.user_id;
    END IF;
END //

DELIMITER ;
Cách hoạt động:
Dữ liệu cũ trong user_activity_logs:
Các bản ghi có activity_time trước mốc install_time (ví dụ: trước 14/03/2025) sẽ không kích hoạt trigger, nên trạng thái user cũ không thay đổi.
Ví dụ: Nếu user A xem đề ngày 10/03/2025, trigger không chạy, has_viewed vẫn là 0.
Dữ liệu mới từ lúc cài đặt trở đi:
Log mới có activity_time >= install_time sẽ kích hoạt trigger.
Nếu user chưa xem lần đầu (has_viewed = 0) và đang đã duyệt, trạng thái chuyển thành bình thường, has_viewed = 1.
Sau đó, trigger không chạy nữa cho user đó vì has_viewed = 1.
Không xóa bảng:
Bảng user_activity_logs giữ nguyên toàn bộ dữ liệu cũ, chỉ thêm điều kiện thời gian trong trigger.
// rest password
CREATE TABLE password_reset_requests (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL,
    request_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
